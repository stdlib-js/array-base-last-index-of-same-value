{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar isSameValue = require( '@stdlib/assert-is-same-value' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var idx = internal( x, 2, 3 );\n* // returns 1\n*/\nfunction internal( x, searchElement, fromIndex ) {\n\tvar i;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tif ( isSameValue( searchElement, x[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Object} x - input array object\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = arraylike2object( toAccessorArray( [ 1, 2, 3, 4 ] ) );\n*\n* var idx = accessors( x, 2, 3 );\n* // returns 1\n*/\nfunction accessors( x, searchElement, fromIndex ) {\n\tvar data;\n\tvar get;\n\tvar i;\n\n\tdata = x.data;\n\tget = x.accessors[ 0 ];\n\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tif ( isSameValue( searchElement, get( data, i ) ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* ## Notes\n*\n* -   If unable to find an element which equals a provided search element, the function returns `-1`.\n*\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {integer} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var idx = lastIndexOfSameValue( x, 2, 3 );\n* // returns 1\n*\n* @example\n* var Int32Array = require( '@stdlib/array-int32' );\n*\n* var x = new Int32Array( [ 1, 2, 3, 4 ] );\n*\n* var idx = lastIndexOfSameValue( x, 2, 3 );\n* // returns 1\n*/\nfunction lastIndexOfSameValue( x, searchElement, fromIndex ) {\n\tvar obj;\n\tif ( fromIndex < 0 ) {\n\t\tfromIndex += x.length;\n\t\tif ( fromIndex < 0 ) {\n\t\t\treturn -1;\n\t\t}\n\t} else if ( fromIndex > x.length ) {\n\t\tfromIndex = x.length - 1;\n\t}\n\tobj = arraylike2object( x );\n\tif ( obj.accessorProtocol ) {\n\t\treturn accessors( obj, searchElement, fromIndex );\n\t}\n\treturn internal( x, searchElement, fromIndex );\n}\n\n\n// EXPORTS //\n\nmodule.exports = lastIndexOfSameValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @module @stdlib/array-base-last-index-of-same-value\n*\n* @example\n* var lastIndexOfSameValue = require( '@stdlib/array-base-last-index-of-same-value' );\n*\n* var x = [ 1, 2, 3, 4 ];\n*\n* var idx = lastIndexOfSameValue( x, 2, 3 );\n* // returns 1\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EAClEC,EAAc,QAAS,8BAA+B,EAoB1D,SAASC,EAAUC,EAAGC,EAAeC,EAAY,CAChD,IAAIC,EACJ,IAAMA,EAAID,EAAWC,GAAK,EAAGA,IAC5B,GAAKL,EAAaG,EAAeD,EAAGG,CAAE,CAAE,EACvC,OAAOA,EAGT,MAAO,EACR,CAoBA,SAASC,EAAWJ,EAAGC,EAAeC,EAAY,CACjD,IAAIG,EACAC,EACA,EAKJ,IAHAD,EAAOL,EAAE,KACTM,EAAMN,EAAE,UAAW,CAAE,EAEf,EAAIE,EAAW,GAAK,EAAG,IAC5B,GAAKJ,EAAaG,EAAeK,EAAKD,EAAM,CAAE,CAAE,EAC/C,OAAO,EAGT,MAAO,EACR,CA+BA,SAASE,EAAsBP,EAAGC,EAAeC,EAAY,CAC5D,IAAIM,EACJ,GAAKN,EAAY,GAEhB,GADAA,GAAaF,EAAE,OACVE,EAAY,EAChB,MAAO,QAEGA,EAAYF,EAAE,SACzBE,EAAYF,EAAE,OAAS,GAGxB,OADAQ,EAAMX,EAAkBG,CAAE,EACrBQ,EAAI,iBACDJ,EAAWI,EAAKP,EAAeC,CAAU,EAE1CH,EAAUC,EAAGC,EAAeC,CAAU,CAC9C,CAKAN,EAAO,QAAUW,ICpGjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "arraylike2object", "isSameValue", "internal", "x", "searchElement", "fromIndex", "i", "accessors", "data", "get", "lastIndexOfSameValue", "obj", "main"]
}
