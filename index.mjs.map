{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/assert-is-accessor-array';\nimport isComplexLike from '@stdlib/assert-is-complex-like';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport isComplexTypedArray from '@stdlib/array-base-assert-is-complex-typed-array';\nimport isBooleanArray from '@stdlib/array-base-assert-is-booleanarray';\nimport resolveGetter from '@stdlib/array-base-resolve-getter';\nimport isSameValue from '@stdlib/assert-is-same-value';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// FUNCTIONS //\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var idx = indexed( x, 2, 3 );\n* // returns 1\n*/\nfunction indexed( x, searchElement, fromIndex ) {\n\tvar i;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tif ( isSameValue( searchElement, x[ i ] ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Object} x - input array object\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n*\n* var x = toAccessorArray( [ 1, 2, 3, 4 ] );\n*\n* var idx = accessors( x, 2, 3 );\n* // returns 1\n*/\nfunction accessors( x, searchElement, fromIndex ) {\n\tvar get;\n\tvar i;\n\n\tget = resolveGetter( x );\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tif ( isSameValue( searchElement, get( x, i ) ) ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 0.0, 0.0, 3.0, 4.0, 0.0, 0.0 ] );\n*\n* var idx = complex( x, new Complex128( 3.0, 4.0 ), 3 );\n* // returns 2\n*/\nfunction complex( x, searchElement, fromIndex ) {\n\tvar view;\n\tvar re;\n\tvar im;\n\tvar i;\n\tif ( !isComplexLike( searchElement ) ) {\n\t\treturn -1;\n\t}\n\tview = reinterpret( x, 0 );\n\tre = real( searchElement );\n\tim = imag( searchElement );\n\tfor ( i = fromIndex*2; i >= 0; i -= 2 ) {\n\t\tif ( isSameValue( view[ i ], re ) && isSameValue( view[ i+1 ], im ) ) {\n\t\t\treturn i / 2;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* @private\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {NonNegativeInteger} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* import BooleanArray from '@stdlib/array-bool';\n*\n* var x = new BooleanArray( [ true, false, true, false, true ] );\n*\n* var idx = boolean( x, true, 3 );\n* // returns 2\n*/\nfunction boolean( x, searchElement, fromIndex ) {\n\tvar view;\n\tvar v;\n\tvar i;\n\tif ( !isBoolean( searchElement ) ) {\n\t\treturn -1;\n\t}\n\tview = reinterpretBoolean( x, 0 );\n\tv = ( searchElement ) ? 1 : 0;\n\tfor ( i = fromIndex; i >= 0; i-- ) {\n\t\tif ( view[ i ] === v ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\n// MAIN //\n\n/**\n* Returns the index of the last element which equals a provided search element according to the same value algorithm.\n*\n* ## Notes\n*\n* -   The function uses the [SameValue Algorithm][ecma-262-same-value-algorithm], as specified in ECMAScript 5.\n* -   In contrast to the strict equality operator `===`, `-0` and `+0` are distinguishable and `NaNs` are the same.\n* -   If unable to find an element which equals a provided search element, the function returns `-1`.\n*\n* [ecma-262-same-value-algorithm]: http://ecma-international.org/ecma-262/5.1/#sec-9.12\n*\n* @param {Collection} x - input array\n* @param {*} searchElement - search element\n* @param {integer} fromIndex - starting index (inclusive)\n* @returns {integer} index\n*\n* @example\n* var x = [ 1, 2, 3, 4 ];\n*\n* var idx = lastIndexOfSameValue( x, 2, 3 );\n* // returns 1\n*\n* @example\n* import Int32Array from '@stdlib/array-int32';\n*\n* var x = new Int32Array( [ 1, 2, 3, 4 ] );\n*\n* var idx = lastIndexOfSameValue( x, 2, 3 );\n* // returns 1\n*/\nfunction lastIndexOfSameValue( x, searchElement, fromIndex ) {\n\tif ( fromIndex < 0 ) {\n\t\tfromIndex += x.length;\n\t\tif ( fromIndex < 0 ) {\n\t\t\treturn -1;\n\t\t}\n\t} else if ( fromIndex > x.length ) {\n\t\tfromIndex = x.length - 1;\n\t}\n\tif ( isAccessorArray( x ) ) {\n\t\tif ( isComplexTypedArray( x ) ) {\n\t\t\treturn complex( x, searchElement, fromIndex );\n\t\t}\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\treturn boolean( x, searchElement, fromIndex );\n\t\t}\n\t\treturn accessors( x, searchElement, fromIndex );\n\t}\n\treturn indexed( x, searchElement, fromIndex );\n}\n\n\n// EXPORTS //\n\nexport default lastIndexOfSameValue;\n"],"names":["lastIndexOfSameValue","x","searchElement","fromIndex","length","isAccessorArray","isComplexTypedArray","view","re","im","i","isComplexLike","reinterpret","real","imag","isSameValue","complex","isBooleanArray","v","isBoolean","reinterpretBoolean","boolean","get","resolveGetter","accessors","indexed"],"mappings":";;qmCAoMA,SAASA,EAAsBC,EAAGC,EAAeC,GAChD,GAAKA,EAAY,GAEhB,IADAA,GAAaF,EAAEG,QACE,EAChB,OAAQ,OAEED,EAAYF,EAAEG,SACzBD,EAAYF,EAAEG,OAAS,GAExB,OAAKC,EAAiBJ,GAChBK,EAAqBL,GAhG5B,SAAkBA,EAAGC,EAAeC,GACnC,IAAII,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAeT,GACpB,OAAQ,EAKT,IAHAK,EAAOK,EAAaX,EAAG,GACvBO,EAAKK,EAAMX,GACXO,EAAKK,EAAMZ,GACLQ,EAAc,EAAVP,EAAaO,GAAK,EAAGA,GAAK,EACnC,GAAKK,EAAaR,EAAMG,GAAKF,IAAQO,EAAaR,EAAMG,EAAE,GAAKD,GAC9D,OAAOC,EAAI,EAGb,OAAQ,CACT,CAgFUM,CAASf,EAAGC,EAAeC,GAE9Bc,EAAgBhB,GA/DvB,SAAkBA,EAAGC,EAAeC,GACnC,IAAII,EACAW,EACAR,EACJ,IAAMS,EAAWjB,GAChB,OAAQ,EAIT,IAFAK,EAAOa,EAAoBnB,EAAG,GAC9BiB,EAAI,EAAoB,EAAI,EACtBR,EAAIP,EAAWO,GAAK,EAAGA,IAC5B,GAAKH,EAAMG,KAAQQ,EAClB,OAAOR,EAGT,OAAQ,CACT,CAiDUW,CAASpB,EAAGC,EAAeC,GAnIrC,SAAoBF,EAAGC,EAAeC,GACrC,IAAImB,EACAZ,EAGJ,IADAY,EAAMC,EAAetB,GACfS,EAAIP,EAAWO,GAAK,EAAGA,IAC5B,GAAKK,EAAab,EAAeoB,EAAKrB,EAAGS,IACxC,OAAOA,EAGT,OAAQ,CACT,CA0HSc,CAAWvB,EAAGC,EAAeC,GAhKtC,SAAkBF,EAAGC,EAAeC,GACnC,IAAIO,EACJ,IAAMA,EAAIP,EAAWO,GAAK,EAAGA,IAC5B,GAAKK,EAAab,EAAeD,EAAGS,IACnC,OAAOA,EAGT,OAAQ,CACT,CA0JQe,CAASxB,EAAGC,EAAeC,EACnC"}